generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  username     String         @unique
  password     String
  roleId       Int
  currencyId   Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  inactive     Boolean        @default(false)
  transactions Transactions[]
  currency     Currencies?    @relation(fields: [currencyId], references: [id])
  role         Roles          @relation(fields: [roleId], references: [id])
  agents       agent_user[]

  @@index([currencyId], map: "Users_currencyId_fkey")
  @@index([roleId], map: "Users_roleId_fkey")
}

model Agents {
  id                 Int            @id @default(autoincrement())
  username           String         @unique
  password           String
  name               String
  level              Int?
  currencyId         Int?
  parentAgentId      Int?           
  rate               Decimal?       @db.Decimal(10, 2) @default(0)
  isActive           Boolean        @default(true)
  parentAgent        Agents?        @relation("ChildAgents", fields: [parentAgentId], references: [id])
  childAgents        Agents[]       @relation("ChildAgents")
  users              agent_user[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime       @updatedAt
  deletedAt          DateTime?

  @@index([parentAgentId], map: "Agents_parentAgentId_fkey")
}

model agent_user {
  id                 Int       @id @default(autoincrement())
  userId             Int
  agentId            Int
  user               Users?    @relation(fields: [userId], references: [id])
  agent              Agents?   @relation(fields: [agentId], references: [id])

  @@index([userId], map: "agent_user_userId_fkey")
  @@index([agentId], map: "agent_user_agentId_fkey")
}


model Roles {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  permissions String?   @db.LongText
  users       Users[]
}

model Currencies {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  code         String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  transactions Transactions[]
  users        Users[]
}

model ip_user {
  id        Int       @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Transactions {
  id         Int        @id @default(autoincrement())
  userId     Int
  action     Int?
  amount     Decimal    @db.Decimal(10, 2)
  currencyId Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
  currency   Currencies @relation(fields: [currencyId], references: [id])
  user       Users      @relation(fields: [userId], references: [id])

  @@index([currencyId], map: "Transactions_currencyId_fkey")
  @@index([userId], map: "Transactions_userId_fkey")
}

model Tables {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  permissions String    @db.LongText
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  deletedAt   DateTime?
}

