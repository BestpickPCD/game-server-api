generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  username       String    @unique
  password       String
  type           String?
  apiKey         String?
  level          Int?
  parentAgentId  Int?
  parentAgentIds Json?
  rate           Decimal?  @default(0) @db.Decimal(10, 2)
  roleId         Int?
  balance        Decimal?  @default(0) @db.Decimal(10, 2)
  currencyId     Int?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  deletedAt      DateTime?

  role                    Roles?         @relation(fields: [roleId], references: [id])
  Players                 Players[]
  currency                Currencies?    @relation(fields: [currencyId], references: [id])
  transactionSenders      Transactions[] @relation("TransactionSender")
  transactionReceivers    Transactions[] @relation("TransactionReceiver")
  transactionUpdatedUsers Transactions[] @relation("TransactionUpdatedUser")
  ip_user                 ip_user[]
  UserVendor              UserVendor[]
}

model Players {
  id        Int       @id @default(autoincrement())
  userId    Int
  username  String    @unique
  nickname  String?    @unique
  type      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  user Users? @relation(fields: [userId], references: [id])
}

model Roles {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  permissions Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  Users       Users[]
}

model Permissions {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  permissions Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Currencies {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  code      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  Users        Users[]
  Transactions Transactions[]
}

model ip_user {
  id        Int       @id @default(autoincrement())
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  users Users? @relation(fields: [userId], references: [id])
}

model Transactions {
  id           Int       @id @default(autoincrement())
  senderId     Int?
  receiverId   Int?
  gameId       String?
  updateUserId Int?
  type         String
  amount       Decimal   @default(0) @db.Decimal(10, 2)
  note         String?   @db.Text
  token        String?
  status       String?
  currencyId   Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?

  currency    Currencies? @relation(fields: [currencyId], references: [id])
  sender      Users?      @relation("TransactionSender", fields: [senderId], references: [id])
  receiver    Users?      @relation("TransactionReceiver", fields: [receiverId], references: [id])
  updatedUser Users?      @relation("TransactionUpdatedUser", fields: [updateUserId], references: [id])
}

model UserVendor {
  id        Int       @id @default(autoincrement())
  userId    Int
  vendorId  Int
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  user   Users?   @relation(fields: [userId], references: [id])
  vendor Vendors? @relation(fields: [vendorId], references: [id])
}

model Vendors {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  url        String?   @unique
  fetchGames Json?
  contract   String?
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  deletedAt  DateTime?

  users UserVendor[]
}
